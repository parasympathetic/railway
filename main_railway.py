#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîµ –°—Ç–∞—Ç—Ç—ñ
articles = [
    "–°—Ç–∞—Ç—Ç—è 1: –í—Å—Ç—É–ø –¥–æ –º–µ–¥–∏—Ç–∞—Ü—ñ—ó ‚Äî —è–∫ –ø—Ä–∞—Ü—é—î —Ä–æ–∑—É–º.",
    "–°—Ç–∞—Ç—Ç—è 2: –î–∏—Ö–∞–Ω–Ω—è —è–∫ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞—Å–ø–æ–∫–æ—î–Ω–Ω—è.",
    "–°—Ç–∞—Ç—Ç—è 3: –Ø–∫ –∑–º–µ–Ω—à–∏—Ç–∏ —Å—Ç—Ä–µ—Å —á–µ—Ä–µ–∑ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω—ñ—Å—Ç—å.",
    "–°—Ç–∞—Ç—Ç—è 4: –ü–∞—Ä–∞—Å–∏–º–ø–∞—Ç–∏—á–Ω–∞ –Ω–µ—Ä–≤–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞: —â–æ —Ü–µ —ñ —è–∫ —ó—ó –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏.",
    "–°—Ç–∞—Ç—Ç—è 5: –†–æ–ª—å —Ñ—ñ–∑–∏—á–Ω–∏—Ö –≤–ø—Ä–∞–≤ —É –ø–æ–¥–æ–ª–∞–Ω–Ω—ñ —Ç—Ä–∏–≤–æ–∂–Ω–æ—Å—Ç—ñ."
]

user_progress = {}

# üîµ /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_progress[chat_id] = {
        'index': 1,
        'last_sent': datetime.now()
    }

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {chat_id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
    
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É —Ç–æ–±—ñ –Ω–æ–≤—É —Å—Ç–∞—Ç—Ç—é –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω üì∞")
    await context.bot.send_message(chat_id=chat_id, text=articles[0])

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—É –∑–∞–¥–∞—á—É
    context.job_queue.run_repeating(
        send_article_if_due,
        interval=timedelta(minutes=5),
        first=timedelta(minutes=5),
        chat_id=chat_id
    )

# üîµ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å—Ç–∞—Ç–µ–π
async def send_article_if_due(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    progress = user_progress.get(chat_id)

    if not progress:
        return

    now = datetime.now()
    idx = progress['index']
    last_sent = progress['last_sent']

    if idx < len(articles) and (now - last_sent) >= timedelta(minutes=5):
        await context.bot.send_message(chat_id=chat_id, text=articles[idx])
        user_progress[chat_id] = {
            'index': idx + 1,
            'last_sent': now
        }
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç–∞—Ç—Ç—é {idx + 1} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}")
    elif idx >= len(articles):
        await context.bot.send_message(
            chat_id=chat_id,
            text="üü¢ –í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –î—è–∫—É—é, —â–æ —á–∏—Ç–∞–≤(–ª–∞)!"
        )
        logger.info(f"–í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id}")

# üîµ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Exception while handling an update: {context.error}")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        return

    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –Ω–∞ Railway...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    app = ApplicationBuilder().token(bot_token).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ Railway - 24/7 —Ä–µ–∂–∏–º")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise
